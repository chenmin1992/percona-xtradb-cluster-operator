#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
cluster="self-healing-advanced"

pumba_all_pods() {
    local action=$1

    # run chaos for Pod
    for i in $(seq 1 5); do
        run_pumba $action "re2:$cluster-pxc-[0-9]+_"
    done
    sleep 60

    kubectl_bin get pods \
        | grep $cluster-pxc- \
        | grep CrashLoopBackOff

    cat_config "$test_dir/conf/$cluster.yml" \
        | sed -e 's/forceUnsafeBootstrap: false/forceUnsafeBootstrap: true/' \
        | kubectl_bin apply -f-
    kubectl_bin delete pod self-healing-advanced-pxc-0 self-healing-advanced-pxc-1 self-healing-advanced-pxc-2

    # check if all 3 Pods started
    wait_for_running $cluster-pxc 3
    sleep 10

    desc 'check data consistency for chaosed Pod'
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-0.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-1.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-2.$cluster-pxc -uroot -proot_password"
}

main() {
    create_namespace $namespace
    deploy_operator
    kubectl_bin apply -f "$test_dir/conf/pumba.yml"

    desc 'start cluster'
    spinup_pxc "$cluster" "$test_dir/conf/$cluster.yml"

    # pumba should be run on all pxc
    desc 'kill all PXC pods'
    pumba_all_pods kill

    destroy $namespace
}

main
