#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

CONTAINERS=(pxc proxysql)
CLUSTER='upgrade'
CLUSTER_SIZE=3
API_TO_UPDATE=${API}
IMAGE_TO_UPDATE=${IMAGE}
IMAGE_PXC_TO_UPDATE=${IMAGE_PXC}
IMAGE_PMM_TO_UPDATE=${IMAGE_PMM}
IMAGE_PROXY_TO_UPDATE=${IMAGE_PROXY}
IMAGE_BACKUP_TO_UPDATE=${IMAGE_BACKUP}
API='pxc.percona.com/v1'
IMAGE='percona/percona-xtradb-cluster-operator:1.1.0'
IMAGE_PXC='percona/percona-xtradb-cluster-operator:1.1.0-pxc'
IMAGE_PMM='perconalab/pmm-client:1.17.1'
IMAGE_PROXY='percona/percona-xtradb-cluster-operator:1.1.0-proxysql'
IMAGE_BACKUP='percona/percona-xtradb-cluster-operator:1.1.0-backup'
OPERATOR_NAME='percona-xtradb-cluster-operator'


wait_cluster_consistency() {
    cluster_name=$1
    cluster_size=$2
    until [[ "$(kubectl_bin get pxc "${cluster_name}" -o jsonpath='{.status.state}')" == "ready" \
             && "$(kubectl_bin get pxc "${cluster_name}" -o jsonpath='{.status.pxc.ready}')" == "${cluster_size}" \
             && "$(kubectl_bin get pxc "${CLUSTER}" -o jsonpath='{.status.proxysql.ready}')" == "${cluster_size}"  ]]; do
        echo 'waiting for cluster readyness'
        sleep 20
    done
}

check_pxc_livenes() {
    cluster_name=$1
    cluster_size=$2

    wait_cluster_consistency "${cluster_name}" "${cluster_size}"
    sleep 20
    wait_cluster_consistency "${cluster_name}" "${cluster_size}"
    sleep 20
    wait_cluster_consistency "${cluster_name}" "${cluster_size}"
    sleep 20
    wait_cluster_consistency "${cluster_name}" "${cluster_size}"
    
    wait_for_running "${cluster_name}-pxc" "${cluster_size}"

    for i in $(seq 0 $(($cluster_size-1))); do
        compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h ${cluster_name}-pxc-$i.${cluster_name}-pxc -uroot -proot_password"
    done
}

compare_generation() {
    generation=$1
    for name in ${CONTAINERS[@]}; do
        if [[ ${generation} != $(kubectl_bin get statefulset "${CLUSTER}-${name}" -o jsonpath='{.metadata.generation}') ]]; then
            echo "Resource ${name} has not been updated"
            exit 1
        fi
    done
}

main() {
    create_namespace $namespace
    deploy_operator

    spinup_pxc "${CLUSTER}" "${test_dir}/conf/${CLUSTER}.yml"

    compare_generation "1"

    kubectl_bin patch deployment "${OPERATOR_NAME}" \
        -p'{"spec":{"template":{"spec":{"containers":[{"name":"'"${OPERATOR_NAME}"'","image":"'"${IMAGE_TO_UPDATE}"'"}]}}}}'
    kubectl_bin rollout status deployment/"${OPERATOR_NAME}"

    echo 'Waiting for operator upgrade'
    until [[ $(kubectl_bin get pods --selector=name=${OPERATOR_NAME} \
                                -o custom-columns='NAME:.metadata.name,IMAGE:.spec.containers[0].image' \
                                | grep -v 'NAME' | wc -l | awk '{print $1}') -eq 1 ]]; do
        sleep 5
    done

    wait_pod "$(kubectl_bin get pods --selector=name=${OPERATOR_NAME} \
                                -o custom-columns='NAME:.metadata.name,IMAGE:.spec.containers[0].image' \
                                | grep "${IMAGE_TO_UPDATE}" |  awk '{print $1}')"


    if [[ "${IMAGE_TO_UPDATE}" == $(kubectl_bin get pod --selector=name="${OPERATOR_NAME}" -o jsonpath='{.items[*].spec.containers[?(@.name == "'"${OPERATOR_NAME}"'")].image}') \
          && "${IMAGE_PROXY}" == $(kubectl_bin get pxc "${CLUSTER}" -o jsonpath='{.spec.proxysql.image}') \
          && "${IMAGE_PXC}" == $(kubectl_bin get pxc "${CLUSTER}" -o jsonpath='{.spec.pxc.image}') ]]; then
        : Operator image has been updated correctly
    else
        echo 'Operator image has not been updated'
        exit 1
    fi

    compare_generation "1"
    sleep 20
    check_pxc_livenes "${CLUSTER}" $CLUSTER_SIZE

    IMAGE_PXC=$IMAGE_PXC_TO_UPDATE
    IMAGE_PMM=$IMAGE_PMM_TO_UPDATE
    IMAGE_PROXY=$IMAGE_PROXY_TO_UPDATE
    IMAGE_BACKUP=$IMAGE_BACKUP_TO_UPDATE
    kubectl_bin patch pxc "${CLUSTER}" --type=merge --patch '{
        "metadata": {"annotations":{ "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"'"$API_TO_UPDATE"'\"}" }},
        "spec": {"pxc":{ "image": "'"$IMAGE_PXC_TO_UPDATE"'" },
            "pmm":      { "image": "'"$IMAGE_PMM_TO_UPDATE"'" },
            "proxysql": { "image": "'"$IMAGE_PROXY_TO_UPDATE"'" },
            "backup":   { "image": "'"$IMAGE_BACKUP_TO_UPDATE"'" }
        }}'

    sleep 5
    compare_generation "2"

    check_pxc_livenes "${CLUSTER}" $CLUSTER_SIZE

    if [[ "${IMAGE_PROXY_TO_UPDATE}" == $(kubectl_bin get pxc "${CLUSTER}" -o jsonpath='{.spec.proxysql.image}') \
          && "${IMAGE_PXC_TO_UPDATE}" == $(kubectl_bin get pxc "${CLUSTER}" -o jsonpath='{.spec.pxc.image}') ]]; then
        : Cluster image has been updated correctly
    else
        echo 'Cluster image has not been updated'
        exit 1
    fi

    destroy "${namespace}"
}

main
