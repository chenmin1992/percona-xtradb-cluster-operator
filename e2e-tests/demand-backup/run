#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

check_pvc_md5() {
    desc 'check backup file md5sum'
    apply_config "$test_dir/conf/client.yml"
    sleep 10
    bak_client_pod=$(
        kubectl_bin get pods \
            --selector=name=backup-client \
            -o 'jsonpath={.items[].metadata.name}'
    )
    wait_pod $bak_client_pod
    kubectl_bin exec $bak_client_pod -- \
        bash -c "cd /backup; md5sum -c md5sum.txt"
    kubectl_bin delete \
        -f $test_dir/conf/client.yml
}

run_backup() {
    local cluster=$1
    local backup1=$2

    desc 'make backup'
    kubectl_bin apply \
        -f $test_dir/conf/$backup1.yml
    wait_backup $backup1
}

run_recovery_check() {
    local cluster=$1
    local backup1=$2

    desc 'write data after backup'
    run_mysql \
        'INSERT myApp.myApp (id) VALUES (100501)' \
        "-h $cluster-proxysql -uroot -proot_password"
    compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-pxc-0.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-pxc-1.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-pxc-2.$cluster-pxc -uroot -proot_password"

    desc 'recover backup'
    kubectl_bin apply -f "$test_dir/conf/restore-${backup1}.yaml"
    wait_backup_restore ${backup1}
    kubectl_bin logs job/restore-job-${backup1}-${cluster}
    kubectl_bin delete -f "$test_dir/conf/restore-${backup1}.yaml"
    wait_for_running "$cluster-proxysql" 1
    wait_for_running "$cluster-pxc" 3

    desc 'check data after backup'
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-0.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-1.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-2.$cluster-pxc -uroot -proot_password"

    if [ "$backup1" != "on-demand-backup-minio" ]; then
        desc 'copy backup'
        bash $src_dir/deploy/backup/copy-backup.sh $backup1 $tmp_dir/backup
    fi
}

start_minio() {
    deploy_helm $namespace

    desc 'install Minio'
    helm del --purge minio-service || :
    helm install \
        --name minio-service \
        --set accessKey=some-access-key \
        --set secretKey=some-secret-key \
        --set service.type=ClusterIP \
        --set configPath=/tmp/.minio/ \
        --set persistence.size=2G \
        --set environment.MINIO_REGION=us-east-1 \
        --set environment.MINIO_HTTP_TRACE=/tmp/trace.log \
        stable/minio
    MINIO_POD=$(kubectl_bin get pods --selector=release=minio-service -o 'jsonpath={.items[].metadata.name}')
    wait_pod $MINIO_POD

    kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
        /usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
        /usr/bin/aws --endpoint-url http://minio-service:9000 s3 mb s3://operator-testing
}

main() {
    create_namespace $namespace
    deploy_operator
    kubectl_bin apply \
        -f $conf_dir/minio-secret.yml \
        -f $conf_dir/cloud-secret.yml
    start_minio

    cluster="some-name"
    spinup_pxc "$cluster" "$conf_dir/$cluster.yml"

    run_backup         "$cluster" "on-demand-backup-pvc"
    run_recovery_check "$cluster" "on-demand-backup-pvc"
    check_pvc_md5

    run_backup         "$cluster" "on-demand-backup-aws-s3"
    run_recovery_check "$cluster" "on-demand-backup-aws-s3"

    run_backup         "$cluster" "on-demand-backup-minio"
    run_recovery_check "$cluster" "on-demand-backup-minio"

    run_backup         "$cluster" "on-demand-backup-gcp-cs"
    run_recovery_check "$cluster" "on-demand-backup-gcp-cs"

    destroy $namespace
}

main
